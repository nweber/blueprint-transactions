// Generated by CoffeeScript 1.10.0
var blueprintAstToRuntime, clone, convertAstMetadata, exampleToHttpPayloadPair, expandUriTemplateWithParameters, getExampleName, getExamplePath, inheritParameters, isEmptyString, validateParameters;

clone = require('clone');

inheritParameters = require('./inherit-parameters');

expandUriTemplateWithParameters = require('./expand-uri-template-with-parameters');

exampleToHttpPayloadPair = require('./example-to-http-payload-pair');

convertAstMetadata = require('./convert-ast-metadata');

validateParameters = require('./validate-parameters');

isEmptyString = function(string) {
  return string === '' || string === null;
};

getExampleName = function(example, exampleIndex) {
  var name, reqName;
  name = 'Example ' + (exampleIndex + 1);
  if (isEmptyString(example.name)) {
    if (example.requests.length > 0) {
      reqName = example.requests[0].name;
      if (!isEmptyString(reqName)) {
        name = reqName;
      }
    } else {
      name = '';
    }
  }
  return name;
};

getExamplePath = function(example, exampleIndex) {
  var name, reqName;
  name = 'Example ' + (exampleIndex + 1);
  if (isEmptyString(example.name)) {
    if (example.requests.length > 0) {
      reqName = example.requests[0].name;
      if (!isEmptyString(reqName)) {
        name = reqName;
      }
    } else {
      name = 'Example 1';
    }
  }
  return name;
};

blueprintAstToRuntime = function(blueprintAst, filename) {
  var action, actionParameters, example, exampleIndex, i, index, j, k, l, len, len1, len2, len3, len4, len5, len6, len7, m, message, n, o, origin, p, parameters, paramsResult, pathOrigin, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, resource, resourceGroup, resourceParameters, result, runtime, transaction, uri, uriResult;
  runtime = {
    transactions: [],
    errors: [],
    warnings: []
  };
  pathOrigin = {};
  origin = {};
  origin['filename'] = filename;
  if (blueprintAst['name'] !== "") {
    origin['apiName'] = blueprintAst['name'];
  } else {
    origin['apiName'] = origin['filename'];
  }
  pathOrigin['apiName'] = blueprintAst['name'];
  ref = blueprintAst['resourceGroups'];
  for (index = i = 0, len = ref.length; i < len; index = ++i) {
    resourceGroup = ref[index];
    pathOrigin['resourceGroupName'] = resourceGroup['name'];
    origin['resourceGroupName'] = resourceGroup['name'];
    ref1 = resourceGroup['resources'];
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      resource = ref1[j];
      if (resource['name'] !== "") {
        pathOrigin['resourceName'] = resource['name'];
        origin['resourceName'] = resource['name'];
      } else {
        pathOrigin['resourceName'] = resource['uriTemplate'];
        origin['resourceName'] = resource['uriTemplate'];
      }
      origin['uriTemplate'] = "" + resource['uriTemplate'];
      ref2 = resource['actions'];
      for (k = 0, len2 = ref2.length; k < len2; k++) {
        action = ref2[k];
        if (action['name'] !== "") {
          pathOrigin['actionName'] = action['name'];
          origin['actionName'] = action['name'];
        } else {
          pathOrigin['actionName'] = action['method'];
          origin['actionName'] = action['method'];
        }
        actionParameters = convertAstMetadata(action['parameters']);
        resourceParameters = convertAstMetadata(resource['parameters']);
        parameters = inheritParameters(actionParameters, resourceParameters);
        paramsResult = validateParameters(parameters);
        ref3 = paramsResult['errors'];
        for (l = 0, len3 = ref3.length; l < len3; l++) {
          message = ref3[l];
          runtime['errors'].push({
            origin: clone(origin),
            message: message
          });
        }
        if ((ref4 = action.attributes) != null ? ref4.uriTemplate : void 0) {
          uri = action.attributes.uriTemplate;
        } else {
          uri = resource['uriTemplate'];
        }
        uriResult = expandUriTemplateWithParameters(uri, parameters);
        ref5 = uriResult['warnings'];
        for (m = 0, len4 = ref5.length; m < len4; m++) {
          message = ref5[m];
          runtime['warnings'].push({
            origin: clone(origin),
            message: message
          });
        }
        ref6 = uriResult['errors'];
        for (n = 0, len5 = ref6.length; n < len5; n++) {
          message = ref6[n];
          runtime['errors'].push({
            origin: clone(origin),
            message: message
          });
        }
        if (uriResult['uri'] !== null) {
          ref7 = action['examples'];
          for (exampleIndex = o = 0, len6 = ref7.length; o < len6; exampleIndex = ++o) {
            example = ref7[exampleIndex];
            origin['exampleName'] = getExampleName(example, exampleIndex);
            pathOrigin['exampleName'] = getExamplePath(example, exampleIndex);
            result = exampleToHttpPayloadPair(example);
            ref8 = result['warnings'];
            for (p = 0, len7 = ref8.length; p < len7; p++) {
              message = ref8[p];
              runtime['warnings'].push({
                origin: clone(origin),
                message: message
              });
            }
            transaction = result['pair'];
            transaction['origin'] = clone(origin);
            transaction['pathOrigin'] = clone(pathOrigin);
            transaction['request']['uri'] = uriResult['uri'];
            transaction['request']['method'] = action['method'];
            runtime['transactions'].push(transaction);
          }
        }
      }
    }
  }
  return runtime;
};

module.exports = blueprintAstToRuntime;
